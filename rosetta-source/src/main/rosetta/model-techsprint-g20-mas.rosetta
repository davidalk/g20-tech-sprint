namespace cdm.techsprint.g20.mas

import org.isda.cdm.*
import cdm.base.*
import cdm.base.math.*
import cdm.base.datetime.*
import cdm.base.staticdata.identifier.*
import cdm.base.staticdata.asset.rates.*
import cdm.base.staticdata.asset.credit.*
import cdm.base.staticdata.asset.common.*
import cdm.base.staticdata.party.*

//Test PROD g2001

// https://www.mas.gov.sg/
body Authority MAS <"The Monetary Authority of Singapore (MAS) is Singapore’s central bank and integrated financial regulator. MAS also works with the financial industry to develop Singapore as a dynamic international financial centre.">

// https://sso.agc.gov.sg/Act/SFA2001
corpus Act "289" SFA <"The Securities And Futures Act relates to the regulation of activities and institutions in the securities and derivatives industry, including leveraged foreign exchange trading, of financial benchmarks and of clearing facilities, and for matters connected therewith.">

// https://sso.agc.gov.sg/SL/SFA2001-S668-2013
corpus Regulations "SFA2001-S668-2013" MAS_2013 <"The Securities And Futures (Reporting Of Derivatives Contracts) Regulations 2013 contain Regulations setting out reporting requirements for OTC counterparties for OTC derivatives.">

corpus FAQ "13May2020|FAQ" FAQ <"These FAQs are to aid implementation of the reporting obligations and elaborate on MAS’ intent for some of the requirements set out under the SF(RDC)R.">

report MAS SFA MAS_2013 in T+2
when Nexus
with fields 
    UniqueTransactionIdentifier
    UniqueProductIdentifier
    PriorUniqueTransactionIdentifier
    Counterparty1
    Counterparty2
    ReportingEntity
    Cleared
    ClearedEntity
    EffectiveDate
    TerminationDate
    ReportingTimestamp
    OptionType
    OptionExpirationDate
    OptionPremium
    // BookingLocation
    // TraderLocation
    InterestRateNotionalAmountLeg1
    InterestRateNotionalCurrencyLeg1
    InterestRateNotionalAmountLeg2
    InterestRateNotionalCurrencyLeg2
    InterestRatePayerLeg1
    InterestRatePayerLeg2
    InterestRateRateLeg1
    InterestRateRateLeg2
    InterestRatePaymentFrequencyPeriodLeg1
    InterestRatePaymentFrequencyMultiplierLeg1
    InterestRatePaymentFrequencyPeriodLeg2
    InterestRatePaymentFrequencyMultiplierLeg2
    InterestRateDayCountLeg1
    InterestRateDayCountLeg2
    InterestRateResetFrequencyPeriodLeg1
    InterestRateResetFrequencyMultiplierLeg1
    InterestRateResetFrequencyPeriodLeg2
    InterestRateResetFrequencyMultiplierLeg2
    InterestRatePrice
    // FXNotionalAmount1
    FXCurrency1
    // FXNotionalAmount2
    FXCurrency2
    FXExchangeRate

eligibility rule Nexus
    // Dummy Rule
     filter when WorkflowStep -> eventIdentifier  exists
    //filter on Country or Trader of ReportingEntity (spreadsheet should contain two columns Booking Location, Trader Location: Mix up data so that some are Booking = SG, some are Trader = SG. some are neither)

reporting rule ContractForEvent
 	extract
 		if WorkflowStep -> businessEvent -> primitives -> contractFormation -> after -> contract only exists
	then WorkflowStep -> businessEvent -> primitives -> contractFormation -> after -> contract
	else if WorkflowStep -> businessEvent -> primitives -> quantityChange -> after -> contract  exists
		then WorkflowStep -> businessEvent -> primitives -> quantityChange -> after -> contract
		else WorkflowStep -> businessEvent -> primitives -> contractFormation -> after -> contract
 	as "Contract"

reporting rule IsInterestRatePayout
    ContractForEvent then
    extract Contract -> tradableProduct -> product -> contractualProduct -> economicTerms -> payout -> interestRatePayout only exists

reporting rule IsFixedFloat
	extract Contract -> tradableProduct -> product -> contractualProduct -> economicTerms -> payout -> interestRatePayout -> rateSpecification -> fixedRate count = 1
	and Contract -> tradableProduct -> product -> contractualProduct -> economicTerms -> payout -> interestRatePayout -> rateSpecification -> floatingRate count = 1

reporting rule InterestRatePayoutPayer
    ContractForEvent then
	filter when rule IsFixedFloat then
	filter when Contract->tradableProduct -> product -> contractualProduct -> economicTerms -> payout -> interestRatePayout -> rateSpecification -> fixedRate exists then
	extract Contract -> tradableProduct then
	(
		extract multiple TradableProduct -> counterparties,
		extract multiple TradableProduct -> product -> contractualProduct -> economicTerms -> payout -> interestRatePayout -> payerReceiver
    ) then

	join key Counterparty -> counterparty foreignKey PayerReceiver -> payer then
	extract Counterparty -> party

reporting rule InterestRatePayoutReceiver
    ContractForEvent then
	filter when rule IsFixedFloat then
	filter when Contract->tradableProduct -> product -> contractualProduct -> economicTerms -> payout -> interestRatePayout -> rateSpecification -> fixedRate exists then
	extract Contract -> tradableProduct then
	(
		extract multiple TradableProduct -> counterparties,
		extract multiple TradableProduct -> product -> contractualProduct -> economicTerms -> payout -> interestRatePayout -> payerReceiver
    	) then
	join key Counterparty -> counterparty foreignKey PayerReceiver -> receiver then
	extract Counterparty -> party

reporting rule FixedFloatLeg1 <"Fixed Float Leg 1">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II"
		rationale_author "DRR"
		rationale "In case of fixed float swaps leg 1 is the fixed rate."
		structured_provision "Leg 1 of a Fixed Float swap is by definition the Fixed leg"
		provision ""]
    ContractForEvent then
	filter when rule IsFixedFloat then
	extract multiple Contract->tradableProduct -> product -> contractualProduct -> economicTerms -> payout then
	filter when Payout -> interestRatePayout -> rateSpecification -> fixedRate exists then
	extract multiple Payout -> interestRatePayout

reporting rule FixedFloatRateLeg1 <"Fixed Float Price">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.9"
    provision "The rate used in leg 1, where applicable. Field value: Any valid number."]
    filter when rule IsInterestRatePayout then
    ContractForEvent then
    extract Contract -> tradableProduct -> priceNotation -> price -> fixedInterestRate -> rate as "II.1.9 Rate leg 1"

reporting rule FixedFloatLeg2 <"Fixed Float Leg 1">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II"
		rationale_author "DRR"
		rationale "In case of fixed float swaps leg 2 is the floating rate."
		structured_provision "Leg 2 of a Fixed Float swap is by definition the Floating leg"
		provision ""]
    ContractForEvent then
	filter when rule IsFixedFloat then
	extract multiple Contract->tradableProduct -> product -> contractualProduct -> economicTerms -> payout then
	filter when Payout -> interestRatePayout -> rateSpecification -> floatingRate exists then
	extract multiple Payout -> interestRatePayout

reporting rule FixedFloatRateLeg2
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.10"
		rationale_author "DRR"
		rationale "In case of fixed float the Price is the initial floating rate."
		structured_provision "The Price of a Fixed Float swap is by definition the Floating leg"
		provision "The rate used in leg 2, where applicable. Field value: Any valid number."]
    filter when rule IsInterestRatePayout then
    ContractForEvent then
    extract Contract -> tradableProduct -> product -> contractualProduct -> economicTerms -> payout -> interestRatePayout -> rateSpecification -> floatingRate -> assetIdentifier -> rateOption -> floatingRateIndex as "II.1.10 Rate of leg 2"

reporting rule IsFixedFixed
	extract Contract -> tradableProduct -> product -> contractualProduct -> economicTerms -> payout -> interestRatePayout -> rateSpecification -> fixedRate count = 2

reporting rule IsIRSwapBasis
	extract Contract -> tradableProduct -> product -> contractualProduct -> economicTerms -> payout -> interestRatePayout -> rateSpecification -> floatingRate count = 2

reporting rule IsCreditDefaultPayout
    ContractForEvent then
    extract Contract -> tradableProduct -> product -> contractualProduct -> economicTerms -> payout -> creditDefaultPayout exists

reporting rule IsFxPayout
    ContractForEvent then
    extract Contract -> tradableProduct -> product -> contractualProduct -> economicTerms -> payout -> forwardPayout only exists

reporting rule UniqueTransactionIdentifier <"Unique transaction identifier (UTI)">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "I" field "1.1"
    provision "An identifier to denote the transaction. For an uncleared contract that is not electronically confirmed, the specified person must report a UTI to be agreed on with the counterparty to the contract or a UTI that is internally generated. For all other contracts, the specified person must report the UTI to be agreed on with the counterparty to the contract. Field value: Alphanumeric string."]
    extract WorkflowStep -> eventIdentifier -> assignedIdentifier -> identifier as "I.1.1 UTI"

reporting rule UniqueProductIdentifier <"Unique product identifier (UPI)">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "I" field "1.2"
    provision "An identifier to denote the product type (e.g. ISDA product taxonomy).  Field value: Alphanumeric string."]
	ContractForEvent then
		extract Contract -> tradableProduct -> product -> contractualProduct -> productIdentification -> productQualifier as "I.1.2 UPI"

reporting rule PriorUniqueTransactionIdentifier <"Previous UTI (where applicable)">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "I" field "1.3"
    provision "To denote the previous UTI relating to this contract. Field value: Alphanumeric string."]
    PriorVersion then
    extract Contract -> contractIdentifier -> assignedIdentifier -> identifier
    as "I.1.3 Prior UTI"
		// extract Contract -> tradableProduct -> product -> contractualProduct -> productIdentification -> productID as "I.1.2 UPI" Model already contains concept of storing UPI with an associated metadata scheme

reporting rule PriorVersion
 	extract
        if WorkflowStep -> businessEvent -> primitives -> quantityChange -> before -> contract  exists
		then WorkflowStep -> businessEvent -> primitives -> quantityChange -> before -> contract
	else if WorkflowStep -> businessEvent -> primitives -> termsChange -> before -> contract  exists
		then WorkflowStep -> businessEvent -> primitives -> termsChange -> before -> contract
	    else WorkflowStep -> businessEvent -> primitives -> quantityChange -> before -> contract

 reporting rule Counterparty1 <"Identifier of reporting entity">
     [regulatoryReference MAS SFA MAS_2013 annex "1" table "I" field "2.1"
     provision "An identifier of counterparty 1. Where counterparty 1 is a specified person, to use LEI or pre‑LEI if LEI is not available. Where counterparty 1 is not a specified person, to use LEI or pre‑LEI if LEI is not available or, if counterparty 1 does not have any LEI or pre‑LEI, to use SWIFT BIC code, AVOX ID, any identifier issued by a licensed trade repository or licensed foreign trade repository, or client code. In the case of individuals, to use a client code. Field value: Alphanumeric string."]
     InterestRatePayoutPayer then
 		extract Party -> partyId as "I.2.1 Counterparty 1"

 reporting rule Counterparty2 <"Identifier of reporting entity">
     [regulatoryReference MAS SFA MAS_2013 annex "1" table "I" field "2.2"
     provision "An identifier of counterparty 2. Where counterparty 2 is a specified person, to use LEI or pre‑LEI if LEI is not available. Where counterparty 2 is not a specified person, to use LEI or pre‑LEI if LEI is not available or, if counterparty 2 does not have any LEI or pre‑LEI, to use SWIFT BIC code, AVOX ID, any identifier issued by a licensed trade repository or licensed foreign trade repository, or client code. In the case of individuals, to use a client code. Field value: Alphanumeric string."]
     InterestRatePayoutReceiver then
 		extract Party -> partyId as "I.2.2 Counterparty 2"

reporting rule ReportingEntity <"Identifier of reporting entity">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "I" field "2.3"
    provision "To denote the identity of the reporting entity.  To use LEI or pre‑LEI if LEI is not available.  Field value: Alphanumeric string."]
	ContractForEvent then
	extract Contract -> partyContractInformation then
		filter when PartyContractInformation -> relatedParty -> role = PartyRoleEnum -> ReportingParty then
			extract PartyContractInformation -> partyReference -> partyId as "I.2.3 Reporting Counterparty ID"

reporting rule Cleared <"Whether the contract has been cleared">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "I" field "3.1"
    provision "To denote if the contract has been cleared. Field value: “True” or “False”."]
        extract if WorkflowStep -> businessEvent -> eventQualifier = "ClearedTrade" then "True"
            else if WorkflowStep -> businessEvent -> eventQualifier <> "ClearedTrade" then "False"
            else "" as "I.3.1 Cleared"

        // extract if WorkflowStep -> businessEvent -> eventQualifier = "ClearedTrade" then "Y"
        //     else if WorkflowStep -> businessEvent -> eventQualifier <> "ClearedTrade" then "N"
        //     else "" as "I.3.1 Cleared"

reporting rule ClearedEntity <"Identifier of clearing entity (where applicable)">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "I" field "3.2"
    provision "To denote the identity of the clearing entity. To use LEI or pre‑LEI if LEI is not available. Field value: Alphanumeric string."]
        return "Out of scope" as "I.3.2 Identifier of Clearing Entity"

//only works for InterestRate, Credit Default
reporting rule EffectiveDate <"Effective date or start date of contract">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "I" field "4.1"
    provision "The date under which the obligations under the contract come into effect.  Field value: ISO 8601 date format, UTC time."]
    ContractForEvent then
    extract multiple
    if Contract -> tradableProduct -> product -> contractualProduct -> economicTerms -> payout -> interestRatePayout only exists
    then Contract -> tradableProduct -> product -> contractualProduct -> economicTerms -> payout -> interestRatePayout -> calculationPeriodDates -> effectiveDate -> adjustableDate -> unadjustedDate
    else if Contract -> tradableProduct -> product -> contractualProduct -> economicTerms -> payout -> creditDefaultPayout exists
    then Contract -> tradableProduct -> product -> contractualProduct -> economicTerms -> effectiveDate -> adjustableDate -> unadjustedDate
    else Contract -> tradableProduct -> product -> contractualProduct -> economicTerms -> effectiveDate -> adjustableDate -> unadjustedDate
    as "I.4.1 Effective Date"

//only works for InterestRate, Credit Default
reporting rule TerminationDate <"Maturity, termination or end date of contract">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "I" field "4.2"
    provision "The date of expiry of the contract.  Field value: ISO 8601 date format, UTC time."]
    ContractForEvent then
    extract multiple
    if Contract -> tradableProduct -> product -> contractualProduct -> economicTerms -> payout -> interestRatePayout only exists
    then Contract -> tradableProduct -> product -> contractualProduct -> economicTerms -> payout -> interestRatePayout -> calculationPeriodDates -> terminationDate -> adjustableDate -> unadjustedDate
    else if Contract -> tradableProduct -> product -> contractualProduct -> economicTerms -> payout -> creditDefaultPayout exists
    then Contract -> tradableProduct -> product -> contractualProduct -> economicTerms -> terminationDate -> adjustableDate -> unadjustedDate
    else Contract -> tradableProduct -> product -> contractualProduct -> economicTerms -> terminationDate -> adjustableDate -> unadjustedDate as "I.4.1 Termination Date"

reporting rule ReportingTimestamp <"Reporting timestamp">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "I" field "5"
    provision "The date and time when the contract was reported to a LTR or LFTR.  Field value: ISO 8601 date format, UTC time."]
    extract multiple WorkflowStep -> timestamp then
        filter when EventTimestamp -> qualification = EventTimestampQualificationEnum -> eventCreationDateTime
            then extract EventTimestamp -> dateTime as "I.5 Reporting Timestamp"

reporting rule OptionType <"Option Type">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "I" field "6.1"
    provision "To denote the type of option. Field value: “Call” or “Put”."]
    return "N/A" as "I.6.1 Option Type"

reporting rule OptionExpirationDate <"Option expiration date">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "I" field "6.2"
    provision "The expiry date of the option. Field value: ISO 8601 date format, UTC time."]
    return "N/A" as "I.6.2 Option Expiration Date"

reporting rule OptionPremium <"Option premium">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "I" field "6.3"
    provision "The amount of option premium paid by the buyer to the seller for the reported contract. Field value: Any valid number."]
    return "N/A" as "I.6.3 Option Premium"

// reporting rule BookingLocation <"Booking location">
//     [regulatoryReference MAS SFA MAS_2013 annex "1" table "IA" field "6.1"
//     provision "Where the contract is booked in Singapore, to use country code for Singapore “SG”. Where the contract is not booked in Singapore, to denote the country where the contract was booked. Field value: ISO 3166‑1 alpha‑2 country code."]
//     input Reporting Entity LEI return value in spreadsheet as "IA.6.1 Booking Location"

// reporting rule TraderLocation <"Booking location">
//     [regulatoryReference MAS SFA MAS_2013 annex "1" table "IA" field "6.2"
//     provision "Where the contract is traded in Singapore, to use country code for Singapore “SG”. Where the contract is not booked in Singapore, to denote the country where the contract was booked. Field value: ISO 3166‑1 alpha‑2 country code."]
//     input Reporting Entity LEI return value in spreadsheet as "IA.6.2 Booking Location"

// //how to associate the right quantity/price/currency with the right leg?
reporting rule InterestRateNotionalAmountLeg1 <"Notional amount for leg 1">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.1"
    provision "The notional amount of leg 1 of the contract. Field value: Any valid number."]
    FixedFloatLeg1 then
    filter when InterestRatePayout -> rateSpecification -> fixedRate exists then
    extract InterestRatePayout -> payoutQuantity -> resolvedQuantity -> amount  as "II.1.1 Notional amount leg 1"

//how to associate the right quantity/price/currency with the right leg?
reporting rule InterestRateNotionalCurrencyLeg1 <"Notional currency for leg 1">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.2"
    provision "The notional currency of leg 1 of the contract. Field value: Any valid number."]
    FixedFloatLeg1 then
	filter when InterestRatePayout -> rateSpecification -> fixedRate exists then
	extract InterestRatePayout -> payoutQuantity -> assetIdentifier -> currency as "II.1.2 Notional currency leg 1"

reporting rule InterestRateNotionalAmountLeg2 <"Notional amount for leg 2">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.3"
    provision "The notional amount of leg 2 of the contract. Field value: Any valid number."]
    FixedFloatLeg2 then
	filter when InterestRatePayout -> rateSpecification -> floatingRate exists then
	extract InterestRatePayout -> payoutQuantity -> resolvedQuantity -> amount as "II.1.3 Notional amount leg 2"    

reporting rule InterestRateNotionalCurrencyLeg2 <"Notional currency for leg 2">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.4"
    provision "The notional currency of leg 2 of the contract. Field value: Any valid number."]
    FixedFloatLeg2 then
	filter when InterestRatePayout -> rateSpecification -> floatingRate exists then
	extract InterestRatePayout -> payoutQuantity -> assetIdentifier -> currency as "II.1.4 Notional currency leg 2"

// reporting rule InterestRatePaymentAmount <"Amount of upfront payment (where applicable)">
//     [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.5"
//     provision "The amount of any upfront payment counterparty 1 made or received. Field value: Any valid number."]
//     filter when rule IsInterestRatePayout then
//     ContractForEvent then
//     extract Contract -> tradableProduct -> quantityNotation -> quantity as "II.1.5 Amount of upfront payment"

// reporting rule InterestRatePaymentCurrency <"Currency/currencies in which upfront payment is expressed (where applicable)">
//     [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.6"
//     provision "The currency/currencies in which the upfront payment is expressed. Field value: ISO currency code."]
//     filter when rule IsInterestRatePayout then
//     ContractForEvent then
//     extract multiple Contract -> tradableProduct -> quantityNotation -> quantity as "II.1.6 Currency of upfront payment"

reporting rule InterestRatePayerLeg1 <"Payer of leg 1">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.7"
    provision "LEI of counterparty paying leg 1. Field value: Alphanumeric string."]
    filter when rule IsInterestRatePayout then
    InterestRatePayoutPayer then
    extract Party -> partyId as "II.1.7 Payer leg 1"

reporting rule InterestRatePayerLeg2 <"Payer of leg 2">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.8"
    provision "LEI of counterparty paying leg 2. Field value: Alphanumeric string."]
    filter when rule IsInterestRatePayout then
    InterestRatePayoutReceiver then
    extract Party -> partyId as "II.1.8 Payer leg 2"

reporting rule InterestRateRateLeg1 <"Rate of leg 1">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.9"
    provision "The rate used in leg 1, where applicable. Field value: Any valid number."]
    FixedFloatRateLeg1

reporting rule InterestRateRateLeg2 <"Rate of leg 2">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.10"
    provision "The rate used in leg 2, where applicable. Field value: Any valid number."]
    FixedFloatRateLeg2

reporting rule InterestRatePaymentFrequencyPeriodLeg1 <"Payment frequency period of leg 1 (where applicable)">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.11"
    provision "The frequency period of payments for leg 1. Field value: D (day), M (month), W (week), Y (year) or T (term)."]
    FixedFloatLeg1 then
	filter when InterestRatePayout -> rateSpecification -> fixedRate exists then
	extract InterestRatePayout -> paymentDates -> paymentFrequency -> period as "II.1.11 Payment frequency period leg 1"

reporting rule InterestRatePaymentFrequencyMultiplierLeg1 <"Payment frequency multiplier of leg 1 (where applicable)">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.20"
    provision "An integer number of the payment frequency period of leg 2. Field value: Any valid number."]
    filter when rule IsInterestRatePayout then
    FixedFloatLeg1 then
	filter when InterestRatePayout -> rateSpecification -> fixedRate exists then
	extract InterestRatePayout -> paymentDates -> paymentFrequency -> periodMultiplier as "II.1.12 Payment frequency multiplier leg 1"

reporting rule InterestRatePaymentFrequencyPeriodLeg2 <"Payment frequency period of leg 2 (where applicable)">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.13"
    provision "The frequency period of payments for leg 2. Field value: D (day), M (month), W (week), Y (year) or T (term)."]
    filter when rule IsInterestRatePayout then
    FixedFloatLeg2 then
	filter when InterestRatePayout -> rateSpecification -> floatingRate exists then
	extract InterestRatePayout -> paymentDates -> paymentFrequency -> period as "II.1.13 Payment frequency period leg 2"

reporting rule InterestRatePaymentFrequencyMultiplierLeg2 <"Payment frequency multiplier of leg 2 (where applicable)">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.14"
    provision "An integer number of the payment frequency period of leg 2. Field value: Any valid number."]
    filter when rule IsInterestRatePayout then
    FixedFloatLeg2 then
	filter when InterestRatePayout -> rateSpecification -> floatingRate exists then
	extract InterestRatePayout -> paymentDates -> paymentFrequency -> periodMultiplier as "II.1.14 Payment frequency multiplier leg 2"

reporting rule InterestRateDayCountLeg1 <"Day count of leg 1 (where applicable)">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.15"
    provision "The actual number of days in the calculation period for leg 1. Field value: “1/1”, “30/360”, “30E/360.ISDA”, “30E/360”, “ACT/360”, “ACT/365.FIXED”, “ACT/365L”, “ACT/ACT.AFB”, “ACT/ACT.ICMA”, “ACT/ACT.ISDA”, “ACT/ACT.ISMA”, “BUS/252” or “Other”."]
    FixedFloatLeg1 then
	filter when InterestRatePayout -> rateSpecification -> fixedRate exists then
	extract InterestRatePayout -> dayCountFraction as "II.1.15 Day count leg 1"

reporting rule InterestRateDayCountLeg2 <"Day count of leg 2 (where applicable)">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.16"
    provision "The actual number of days in the calculation period for leg 1. Field value: “1/1”, “30/360”, “30E/360.ISDA”, “30E/360”, “ACT/360”, “ACT/365.FIXED”, “ACT/365L”, “ACT/ACT.AFB”, “ACT/ACT.ICMA”, “ACT/ACT.ISDA”, “ACT/ACT.ISMA”, “BUS/252” or “Other”."]
    FixedFloatLeg2 then
	filter when InterestRatePayout -> rateSpecification -> floatingRate exists then
	extract InterestRatePayout -> dayCountFraction as "II.1.16 Day count leg 2"

reporting rule InterestRateResetFrequencyPeriodLeg1 <"Reset frequency period of leg 1 (where applicable)">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.17"
    provision "The frequency period of resets for leg 1. Field value: D (day), M (month), W (week), Y (year) or T (term)."]
    filter when rule IsInterestRatePayout then
    FixedFloatLeg1 then
	filter when InterestRatePayout -> rateSpecification -> fixedRate exists then
	extract InterestRatePayout -> calculationPeriodDates -> calculationPeriodFrequency -> period as "II.1.17 Reset frequency period leg 1"

reporting rule InterestRateResetFrequencyMultiplierLeg1 <"Reset frequency multiplier of leg 1 (where applicable)">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.18"
    provision "An integer number of the reset frequency period of leg 1. Field value: Any valid number."]
    filter when rule IsInterestRatePayout then
    FixedFloatLeg1 then
	filter when InterestRatePayout -> rateSpecification -> fixedRate exists then
	extract InterestRatePayout -> calculationPeriodDates -> calculationPeriodFrequency -> periodMultiplier as "II.1.18 Reset frequency multiplier leg 1"

reporting rule InterestRateResetFrequencyPeriodLeg2 <"Reset frequency period of leg 2 (where applicable)">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.19"
    provision "The frequency period of resets for leg 2. Field value: D (day), M (month), W (week), Y (year) or T (term)."]
    filter when rule IsInterestRatePayout then
    FixedFloatLeg2 then
	filter when InterestRatePayout -> rateSpecification -> floatingRate exists then
	extract InterestRatePayout -> calculationPeriodDates -> calculationPeriodFrequency -> period as "II.1.19 Reset frequency period leg 2"

reporting rule InterestRateResetFrequencyMultiplierLeg2 <"Reset frequency multiplier of leg 2 (where applicable)">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.20"
    provision "An integer number of the reset frequency period of leg 2. Field value: Any valid number."]
    filter when rule IsInterestRatePayout then
    FixedFloatLeg2 then
	filter when InterestRatePayout -> rateSpecification -> floatingRate exists then
	extract InterestRatePayout -> calculationPeriodDates -> calculationPeriodFrequency -> periodMultiplier as "II.1.20 Reset frequency multiplier leg 2"

reporting rule InterestRatePrice <"Price/spread (where applicable)">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "II" field "1.21"
    provision "Transacted price/spread. Field value: Any valid number."]
    filter when rule IsInterestRatePayout then
    ContractForEvent then
    extract Contract -> tradableProduct -> priceNotation -> price -> floatingInterestRate -> spread as "II.1.21 Price/spread"

// reporting rule FXNotionalAmount1 <"Notional amount 1">
//     [regulatoryReference MAS SFA MAS_2013 annex "1" table "IV" field "1.1"
//     provision "The notional amount of the first underlying currency. Field value: Any valid number."]
//     filter when rule IsFxPayout then
//     ContractForEvent then
//     extract multiple Contract -> tradableProduct -> quantityNotation -> quantity1 as "IV.1.1 Notional amount 1"

reporting rule FXCurrency1 <"Currency 1">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "IV" field "1.2"
    provision "The notional currency payable by specified person. Field value: ISO currency code."]
    filter when rule IsFxPayout then
    ContractForEvent then
    extract Contract -> tradableProduct -> priceNotation -> price -> exchangeRate -> quotedCurrencyPair -> currency1 as "IV.1.2 Currency 1"

// reporting rule FXNotionalAmount2 <"Notional amount 2">
//     [regulatoryReference MAS SFA MAS_2013 annex "1" table "IV" field "1.3"
//     provision "The notional amount of the second underlying currency. Field value: Any valid number."]
//     filter when rule IsFxPayout then
//     ContractForEvent then
//     extract Contract -> tradableProduct -> quantityNotation -> quantity2 as "IV.1.3 Notional amount 2"

reporting rule FXCurrency2 <"Currency 2">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "IV" field "1.4"
    provision "The notional currency payable by the counterparty. Field value: ISO currency code."]
    filter when rule IsFxPayout then
    ContractForEvent then
    extract Contract -> tradableProduct -> priceNotation -> price -> exchangeRate -> quotedCurrencyPair -> currency2 as "IV.1.4 Currency 2"

reporting rule FXExchangeRate <"Exchange Rate">
    [regulatoryReference MAS SFA MAS_2013 annex "1" table "IV" field "1.5"
    provision "The exchange rate of the currencies of the contract. Field value: Any valid number. "]
    filter when rule IsFxPayout then
    ContractForEvent then
    extract Contract -> tradableProduct -> priceNotation -> price -> exchangeRate -> rate as "IV.1.5 Exchange Rate"

// reporting rule FXNotionalAmount1 <"Notional amount 1">
//     [regulatoryReference MAS SFA MAS_2013 annex "1" table "IV" field "1.1"
//     provision "The notional amount of the first underlying currency. Field value: Any valid number."]
//     filter when rule IsInterestRatePayout then
//     ContractForEvent then
//     extract multiple Contract -> tradableProduct -> quantityNotation -> quantity as "IV.1.1 Notional amount leg 1"

// reporting rule FXCurrency1 <"Currency 1">
//     [regulatoryReference MAS SFA MAS_2013 annex "1" table "IV" field "1.2"
//     provision "The notional currency payable by specified person. Field value: ISO currency code."]
//     FixedFloatLeg1 then
// 	filter when InterestRatePayout -> rateSpecification -> fixedRate exists then
// 	extract InterestRatePayout -> payoutQuantity -> assetIdentifier -> currency as "II.1.2 Notional currency leg 1"

// reporting rule FXNotionalAmount2 <"Notional amount 2">
//     [regulatoryReference MAS SFA MAS_2013 annex "1" table "IV" field "1.3"
//     provision "The notional amount of the second underlying currency. Field value: Any valid number."]
//     filter when rule IsInterestRatePayout then
//     ContractForEvent then
//     extract Contract -> tradableProduct -> quantityNotation -> quantity as "II.1.3 Notional amount leg 2"

// reporting rule FXCurrency2 <"Currency 2">
//     [regulatoryReference MAS SFA MAS_2013 annex "1" table "IV" field "1.4"
//     provision "The notional currency payable by the counterparty. Field value: ISO currency code."]
//     FixedFloatLeg2 then
// 	filter when InterestRatePayout -> rateSpecification -> floatingRate exists then
// 	extract InterestRatePayout -> payoutQuantity -> assetIdentifier -> currency as "II.1.4 Notional currency leg 2"

// reporting rule FXExchangeRate <"Exchange Rate">
//     [regulatoryReference MAS SFA MAS_2013 annex "1" table "IV" field "1.5"
//     provision "The notional currency of leg 2 of the contract. Field value: Any valid number."]
//     ContractForEvent then
//     extract multiple
